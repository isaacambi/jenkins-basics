LDING A CD PIPELINE
1. Jenkins server is already installed and it's running on port 8085. You can access the same 
using Jenkins button on the top bar. Login into the Jenkins server using below given credentials:

Username: admin

Password: Adm!n321


Notes:


A. You might need to restart Jenkins service after installing some plugins or after making 
some configuration changes etc. In such case please make sure Jenkins service is back up before you submit your solution.


B. Please make a note of Jenkins credentials given above.

2. What is a Jenkinsfile?
solution
A Jenkinsfile is a text file that contains the definition of a Jenkins Pipeline.

3. Which of the following components is not a part of Jenkinsfile (Jenkins pipeline) ?
Ans = needs

4. Does Jenkins support multi-stage pipeline?
Ans = Yes

5. Install Pipeline Jenkins plugin?

Note: Just in case Jenkins page gets stuck after restart please try to refresh it.

    Pipeline plugin is installed?
solution
a. Go to Manage Jenkins.

b. Click on Plugins.

c. Under Available, search for Pipeline plugin.

d. Select it and install.

e. Once installed click on Restart Jenkins when installation is complete and no jobs are running.


6. Create a pipeline job named hello-world, it should just echo the Hello World string.

You can name the stage as per your choice.

Login into the Jenkins server and follow the below given steps:

1. On the left side click on New Item.

2. Write the job name hello-world.

3. Select Pipeline job.

4. Under Pipeline section keep selected Pipeline script as Definition and add below given code in the Script

pipeline {
    agent any
    stages {
        stage('Hello') {
            steps {
                echo 'Hello World'
            }
        }
    }
}

7. We have a pipeline job named go-test but its incomplete.

Complete the same by adding the required stages/steps as per details mentioned below:

a. Clone a git repository.

git 'https://github.com/kodekloudhub/go-webapp-sample.git'



b. Run a shell command go test ./...

sh 'go test ./...'


e. Finally save the job. 
solution
pipeline {
    agent {
        label {
            label 'master'
            customWorkspace "${JENKINS_HOME}/${BUILD_NUMBER}/"
        }
    }
    environment {
        Go111MODULE='on'
    }
    stages {
        stage('Test') {
            steps {
                git 'https://github.com/kodekloudhub/go-webapp-sample.git'
                sh 'go test ./...'
            }
        }
    }

8. Now modify the go-test pipeline job as per details mentioned below:

1. Remove the sh 'go test ./...' step.

2. Add an another stage (name it as per your choice) to build a docker image from the cloned code. 
The required Jenkins plugins have already been installed i.e Docker and Docker pipeline. The image
 should be tagged as adminturneddevops/go-webapp-sample


pipeline {
    agent {
        label {
            label 'master'
            customWorkspace "${JENKINS_HOME}/${BUILD_NUMBER}/"
        }
    }
    environment {
        Go111MODULE='on'
    }
    stages {
        stage('Test') {
            steps {
                git 'https://github.com/kodekloudhub/go-webapp-sample.git'
            }
        }
        stage('build') {
            steps {
                script{
                    image = docker.build("adminturneddevops/go-webapp-sample")
                }
            }
        }
    }
}

9. Now that you have built the docker image so let's modify the go-test pipeline job to
 deploy an app using this docker image. Find below more details:

1. Add an another step to run a docker container using the docker image you are building in
 this pipeline itself. Make sure to map container port 8000 with docker host port 8090. 
This is the step you can add:
sh "docker run -p 8090:8000 -d adminturneddevops/g

pipeline {
    agent {
        label {
            label 'master'
            customWorkspace "${JENKINS_HOME}/${BUILD_NUMBER}/"
        }
    }
    environment {
        Go111MODULE='on'
    }
    stages {
        stage('Test') {
            steps {
                git 'https://github.com/kodekloudhub/go-webapp-sample.git'
            }
        }
        stage('build') {
            steps {
                script{
                    image = docker.build("adminturneddevops/go-webapp-sample")
                    sh "docker run -p 8090:8000 -d adminturneddevops/go-webapp-sample"
                }
            }
        }
    }

10. ou can access the deployed app using Sample-App button on the top bar.

You can login with the following username and password:

username: test
password: test

